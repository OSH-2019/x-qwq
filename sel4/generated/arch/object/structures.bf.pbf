--
-- Copyright 2014, General Dynamics C4 Systems
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(GD_GPL)
--
--
-- Copyright 2017, Data61
-- Commonwealth Scientific and Industrial Research Organisation (CSIRO)
-- ABN 41 687 119 230.
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(DATA61_GPL)
--
---- Default base size: uint64_t
base 64(48,1)
-- Including the common structures.bf is neccessary because
-- we need the structures to be visible here when building
-- the capType
--
-- Copyright 2017, Data61
-- Commonwealth Scientific and Industrial Research Organisation (CSIRO)
-- ABN 41 687 119 230.
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(DATA61_GPL)
--
block null_cap {
    padding 64
    field capType 5
    padding 59
}
block untyped_cap {
    field capFreeIndex 48
    padding 9
    field capIsDevice 1
    field capBlockSize 6
    field capType 5
    padding 11
    field_high capPtr 48
}
block endpoint_cap(capEPBadge, capType, capCanGrant, capCanSend, capCanReceive,
                   capEPPtr) {
    field capEPBadge 64
    field capType 5
    field capCanGrant 1
    field capCanReceive 1
    field capCanSend 1
    padding 8
    field_high capEPPtr 48
}
block notification_cap {
    field capNtfnBadge 64
    field capType 5
    field capNtfnCanReceive 1
    field capNtfnCanSend 1
    padding 9
    field_high capNtfnPtr 48
}
block reply_cap(capReplyMaster, capTCBPtr, capType) {
    field capTCBPtr 64
    field capType 5
    padding 58
    field capReplyMaster 1
}
-- The user-visible format of the data word is defined by cnode_capdata, below.
block cnode_cap(capCNodeRadix, capCNodeGuardSize, capCNodeGuard,
                capType, capCNodePtr) {
    field capCNodeGuard 64
    field capType 5
    field capCNodeGuardSize 6
    field capCNodeRadix 6
    field_high capCNodePtr 47
}
block thread_cap {
    padding 64
    field capType 5
    padding 11
    field_high capTCBPtr 48
}
block irq_control_cap {
    padding 64
    field capType 5
    padding 59
}
block irq_handler_cap {
    padding 56
    field capIRQ 8
    field capType 5
    padding 59
}
block zombie_cap {
    field capZombieID 64
    field capType 5
    padding 52
    field capZombieType 7
}
block domain_cap {
    padding 64
    field capType 5
    padding 59
}
---- Arch-independent object types
-- Endpoint: size = 16 bytes
block endpoint {
    field epQueue_head 64
    padding 16
    field_high epQueue_tail 46
    field state 2
}
-- Async endpoint: size = 32 bytes
block notification {
    padding 16
    field_high ntfnBoundTCB 48
    field ntfnMsgIdentifier 64
    padding 16
    field_high ntfnQueue_head 48
    field_high ntfnQueue_tail 48
    padding 14
    field state 2
}
-- Mapping database (MDB) node: size = 16 bytes
block mdb_node {
    padding 16
    field_high mdbNext 46
    field mdbRevocable 1
    field mdbFirstBadged 1
    field mdbPrev 64
}
-- Thread state data
--
-- tsType
-- * Running
-- * Restart
-- * Inactive
-- * BlockedOnReceive
-- - DiminishCaps
-- - Endpoint
-- * BlockedOnSend
-- - Endpoint
-- - CanGrant
-- - IsCall
-- - IPCBadge
-- - Fault
-- - seL4_FaultType
-- * CapFault
-- - Address
-- - InReceivePhase
-- - LookupFailure
-- - lufType
-- * InvalidRoot
-- * MissingCapability
-- - BitsLeft
-- * DepthMismatch
-- - BitsFound
-- - BitsLeft
-- * GuardMismatch
-- - GuardFound
-- - BitsLeft
-- - GuardSize
-- * VMFault
-- - Address
-- - FSR
-- - FaultType
-- * UnknownSyscall
-- - Number
-- * UserException
-- - Number
-- - Code
-- * BlockedOnReply
-- * BlockedOnFault
-- - Fault
-- * BlockedOnNotification
-- - Notification
-- * Idle
-- Lookup fault: size = 16 bytes
block invalid_root {
    padding 64
    padding 62
    field lufType 2
}
block missing_capability {
    padding 64
    padding 55
    field bitsLeft 7
    field lufType 2
}
block depth_mismatch {
    padding 64
    padding 48
    field bitsFound 7
    field bitsLeft 7
    field lufType 2
}
block guard_mismatch {
    field guardFound 64
    padding 48
    field bitsLeft 7
    field bitsFound 7
    field lufType 2
}
tagged_union lookup_fault lufType {
    tag invalid_root 0
    tag missing_capability 1
    tag depth_mismatch 2
    tag guard_mismatch 3
}
-- Fault: size = 16 bytes
block NullFault {
    padding 64
    padding 61
    field seL4_FaultType 3
}
block CapFault {
    field address 64
    field inReceivePhase 1
    padding 60
    field seL4_FaultType 3
}
block UnknownSyscall {
    field syscallNumber 64
    padding 61
    field seL4_FaultType 3
}
block UserException {
    padding 64
    field number 32
    field code 29
    field seL4_FaultType 3
}
-- Thread state: size = 8 bytes
block thread_state(blockingIPCBadge, blockingIPCCanGrant, blockingIPCIsCall,
                   tcbQueued, blockingIPCDiminishCaps, tsType,
                   blockingObject) {
    field blockingIPCBadge 64
    padding 60
    field blockingIPCCanGrant 1
    field blockingIPCIsCall 1
    field blockingIPCDiminishCaps 1
    field tcbQueued 1
    padding 16
    field_high blockingObject 44
    field tsType 4
}
---- x86-64 specific cap types
block frame_cap {
    -- The ASID doubles as the PCI bus/dev/fun when used in an IOMMU context
    -- so it is 16 instead of 12
    field capFMappedASID 16
    field_high capFBasePtr 48
    field capType 5
    field capFSize 2
    field capFMapType 2
    field_high capFMappedAddress 48
    field capFVMRights 2
    field capFIsDevice 1
    padding 4
}
-- Second-level page table
block page_table_cap {
    padding 4
    field capPTMappedASID 12
    field_high capPTBasePtr 48
    field capType 5
    padding 9
    field capPTIsMapped 1
    field_high capPTMappedAddress 28
    padding 21
}
-- First-level page table (page directory)
block page_directory_cap {
    padding 4
    field capPDMappedASID 12
    field_high capPDBasePtr 48
    field capType 5
    padding 9
    field capPDIsMapped 1
    field_high capPDMappedAddress 19
    padding 30
}
block pdpt_cap {
    padding 4
    field capPDPTMappedASID 12
    field_high capPDPTBasePtr 48
    field capType 5
    field capPDPTIsMapped 1
    field_high capPDPTMappedAddress 10
    padding 48
}
block pml4_cap(capPML4MappedASID, capPML4BasePtr, capType, capPML4IsMapped) {
    field capPML4BasePtr 64
    field capType 5
    field capPML4IsMapped 1
    padding 46
    field capPML4MappedASID 12
}
-- Cap to the table of 2^6 ASID pools
block asid_control_cap {
    padding 64
    field capType 5
    padding 59
}
-- Cap to a pool of 2^9 ASIDs
block asid_pool_cap {
    padding 64
    field capType 5
    field capASIDBase 12
    padding 10
    field_high capASIDPool 37
}
-- IO Port Control Cap
block io_port_control_cap {
    padding 64
    field capType 5
    padding 59
}
-- IO Port Cap
block io_port_cap {
    padding 64
    field capType 5
    padding 3
    field capIOPortFirstPort 16
    field capIOPortLastPort 16
    padding 8
    padding 16
}
-- NB: odd numbers are arch caps (see isArchCap())
tagged_union cap capType {
    -- 5-bit tag caps
    tag null_cap 0
    tag untyped_cap 2
    tag endpoint_cap 4
    tag notification_cap 6
    tag reply_cap 8
    tag cnode_cap 10
    tag thread_cap 12
    tag irq_control_cap 14
    tag irq_handler_cap 16
    tag zombie_cap 18
    tag domain_cap 20
    -- 5-bit tag arch caps
    tag frame_cap 1
    tag page_table_cap 3
    tag page_directory_cap 5
    tag pdpt_cap 7
    tag pml4_cap 9
    tag asid_control_cap 11
    tag asid_pool_cap 13
    tag io_port_cap 19
    tag io_port_control_cap 31
}
---- Arch-independent object types
block VMFault {
    field address 64
    padding 32
    field FSR 5
    padding 7
    field instructionFault 1
    padding 16
    field seL4_FaultType 3
}
-- VM attributes
block vm_attributes {
    padding 61
    field x86PATBit 1
    field x86PCDBit 1
    field x86PWTBit 1
}
---- x86-64 specific object types
-- GDT entries (Segment Desciptors)
block gdt_null {
    padding 19
    padding 1
    field seg_type 4
    padding 40
}
block gdt_code {
    field base_high 8
    field granularity 1
    field operation_size 1
    field long_mode 1
    field avl 1
    field seg_limit_high 4
    field present 1
    field dpl 2
    field always_1 1
    field seg_type 4
    field base_mid 8
    field base_low 16
    field seg_limit_low 16
}
block gdt_data {
    field base_high 8
    field granularity 1
    field operation_size 1
    padding 1
    field avl 1
    field seg_limit_high 4
    field present 1
    field dpl 2
    field always_1 1
    field seg_type 4
    field base_mid 8
    field base_low 16
    field seg_limit_low 16
}
block gdt_tss {
    padding 32
    field base_63_32 32
    field base_31_24 8
    field granularity 1
    padding 2
    field avl 1
    field limit_high 4
    field present 1
    field dpl 2
    padding 1
    field desc_type 4
    field base_23_16 8
    field base_15_0 16
    field limit_low 16
}
tagged_union gdt_entry seg_type {
    tag gdt_null 0
    tag gdt_data 7
    tag gdt_code 11
}
-- IDT entries (Gate Desciptors)
block task_gate {
    padding 32
    field offset_63_32 32
    field offset_31_16 16
    field present 1
    field dpl 2
    padding 1
    field type 4
    padding 5
    field ist 3
    field tss_seg_selector 16
    field offset_15_0 16
}
block interrupt_gate {
    padding 32
    field offset_63_32 32
    field offset_31_16 16
    field present 1
    field dpl 2
    padding 1
    field type 4
    padding 5
    field ist 3
    field seg_selector 16
    field offset_15_0 16
}
block trap_gate {
    padding 32
    field offset_63_32 32
    field offset_31_16 16
    field present 1
    field dpl 2
    padding 1
    field type 4
    padding 5
    field ist 3
    field seg_selector 16
    field offset_15_0 16
}
tagged_union idt_entry type {
    tag interrupt_gate 14
    tag trap_gate 15
}
-- Task State Segment (TSS)
block tss {
    field io_map_base 16
    padding 16
    padding 32
    padding 32
    field ist7_u 32
    field ist7_l 32
    field ist6_u 32
    field ist6_l 32
    field ist5_u 32
    field ist5_l 32
    field ist4_u 32
    field ist4_l 32
    field ist3_u 32
    field ist3_l 32
    field ist2_u 32
    field ist2_l 32
    field ist1_u 32
    field ist1_l 32
    padding 32
    padding 32
    field rsp2_u 32
    field rsp2_l 32
    field rsp1_u 32
    field rsp1_l 32
    field rsp0_u 32
    field rsp0_l 32
    padding 32
}
block asid_map_none {
    padding 62
    field type 2
}
block asid_map_vspace {
    field_high vspace_root 48
    padding 14
    field type 2
}
tagged_union asid_map type {
    tag asid_map_none 0
    tag asid_map_vspace 1
}
-- PML4, PDPE, PDs and PTs, assuming 51-bit physical address
base 64(51,0)
block pml4e {
    field xd 1
    padding 11
    padding 1
    field_high pdpt_base_address 39
    padding 4
    padding 1
    padding 1
    field accessed 1
    field cache_disabled 1
    field write_through 1
    field super_user 1
    field read_write 1
    field present 1
}
block pdpte_1g {
    field xd 1
    padding 11
    padding 1
    field_high page_base_address 21
    padding 17
    field pat 1
    padding 3
    field global 1
    field page_size 1
    field dirty 1
    field accessed 1
    field cache_disabled 1
    field write_through 1
    field super_user 1
    field read_write 1
    field present 1
}
block pdpte_pd {
    field xd 1
    padding 11
    padding 1
    field_high pd_base_address 39
    padding 4
    field page_size 1
    padding 1
    field accessed 1
    field cache_disabled 1
    field write_through 1
    field super_user 1
    field read_write 1
    field present 1
}
tagged_union pdpte page_size {
    tag pdpte_1g 1
    tag pdpte_pd 0
}
block pde_large {
    field xd 1
    padding 11
    padding 1
    field_high page_base_address 30
    padding 8
    field pat 1
    padding 3
    field global 1
    field page_size 1
    field dirty 1
    field accessed 1
    field cache_disabled 1
    field write_through 1
    field super_user 1
    field read_write 1
    field present 1
}
block pde_pt {
    field xd 1
    padding 11
    padding 1
    field_high pt_base_address 39
    padding 4
    field page_size 1
    padding 1
    field accessed 1
    field cache_disabled 1
    field write_through 1
    field super_user 1
    field read_write 1
    field present 1
}
tagged_union pde page_size {
    tag pde_pt 0
    tag pde_large 1
}
block pte {
    field xd 1
    padding 11
    padding 1
    field_high page_base_address 39
    padding 3
    field global 1
    field pat 1
    field dirty 1
    field accessed 1
    field cache_disabled 1
    field write_through 1
    field super_user 1
    field read_write 1
    field present 1
}
block cr3 {
    padding 13
    field_high pml4_base_address 39
    field pcid 12
}
--
-- Copyright 2017, Data61
-- Commonwealth Scientific and Industrial Research Organisation (CSIRO)
-- ABN 41 687 119 230.
--
-- This software may be distributed and modified according to the terms of
-- the BSD 2-Clause license. Note that NO WARRANTY is provided.
-- See "LICENSE_BSD2.txt" for details.
--
-- @TAG(DATA61_BSD)
--
-- this file contains sel4arch specific types shared between libsel4 and the kernel
tagged_union seL4_Fault seL4_FaultType {
    -- generic faults
    tag NullFault 0
    tag CapFault 1
    tag UnknownSyscall 2
    tag UserException 3
    -- arch specific faults
    tag VMFault 5
}
base 32
block x86_pat_msr {
    padding 5
    field pa7 3
    padding 5
    field pa6 3
    padding 5
    field pa5 3
    padding 5
    field pa4 3
    padding 5
    field pa3 3
    padding 5
    field pa2 3
    padding 5
    field pa1 3
    padding 5
    field pa0 3
}
-- Local APIC
block apic_base_msr {
    field_high base_addr 20
    field enabled 1
    field x2apic 1
    padding 1
    field is_bsp 1
    padding 8
}
block apic_version {
    padding 8
    field max_lvt_entry 8
    padding 8
    field version 8
}
block apic_svr {
    padding 22
    field focus_processor_chk 1
    field enabled 1
    field spurious_vector 8
}
block apic_lvt {
    padding 13
    field timer_mode 2
    field masked 1
    field trigger_mode 1
    field remote_irr 1
    field pin_polarity 1
    field delivery_status 1
    padding 1
    field delivery_mode 3
    field vector 8
}
block apic_icr1 {
    padding 12
    field dest_shorthand 2
    padding 2
    field trigger_mode 1
    field level 1
    padding 1
    field delivery_status 1
    field dest_mode 1
    field delivery_mode 3
    field vector 8
}
block apic_icr2 {
    field dest 8
    padding 24
}
block x2apic_icr1 {
    padding 12
    field dest_shorthand 2
    padding 2
    field trigger_mode 1
    field level 1
    padding 2
    field dest_mode 1
    field delivery_mode 3
    field vector 8
}
block x2apic_icr2 {
    field dest 32
}
-- x86-specific IRQ state structure
block irq_ioapic {
    field irqType 4
    field id 5
    field pin 5
    field level 1
    field polarity_low 1
    field masked 1
    padding 15
    padding 32
}
block irq_msi {
    field irqType 4
    field bus 8
    field dev 5
    field func 3
    padding 12
    field handle 32
}
block irq_free {
    field irqType 4
    padding 28
    padding 32
}
block irq_reserved {
    field irqType 4
    padding 28
    padding 32
}
tagged_union x86_irq_state irqType {
    tag irq_free 0
    tag irq_ioapic 1
    tag irq_msi 2
    tag irq_reserved 3
}
-- CPUID bitfields. Same on 32 and 64 bit.
block cpuid_001h_eax {
    padding 4
    field extended_family 8
    field extended_model 4
    padding 2
    field type 2
    field family 4
    field model 4
    field stepping 4
}
block cpuid_001h_ebx {
    padding 24
    field brand 8
}
block cpuid_007h_ebx {
    padding 2
    field sha 1
    padding 3
    field intel_processor_trace 1
    padding 1
    field clfushopt 1
    padding 2
    field smap 1
    field adx 1
    field rdseed 1
    padding 2
    field rdt_a 1
    field mpx 1
    field deprecate_fpu_cs_ds 1
    field rdt_m 1
    field rtm 1
    field invpcid 1
    field enhanced_rep_mov 1
    field bmi2 1
    field smep 1
    field fdp_excptn_only 1
    field avx2 1
    field hle 1
    field bmi1 1
    field sgx 1
    field ia32_tsc_adjust 1
    field fsgsbase 1
}
block cpuid_007h_edx {
    padding 2
    field ia32_arch_cap_msr 1
    padding 1
    field stibp 1
    field ibrs_ibpb 1
    padding 26
}
block ia32_arch_capabilities_msr {
    padding 30
    field ibrs_all 1
    field rdcl_no 1
}
